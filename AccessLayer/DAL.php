<?php
/**
 * Created by PhpStorm.
 * User: Swastik
 * Date: 2/1/2019
 * Time: 12:40 PM
 */



namespace AccessLayer;

require 'namespace.php';




class DAL
{


        public $id;
        public $data;
        public $tableName;
        public $conn;
        public $button;
        public $fileHolder;
        public $files;
        public $imgPath;


    public  function __construct()
    {

        $this->id = '';
        $this->data = [];
        $this->tableName = '';
        $connection = new Conn();
        $this->conn = $connection->connect();
        $this->button = '';
        $this->fileHolder = '';
        $this->files = [];
        $this->imgPath = '';

        //die($this->conn);

    }


    /**
     * @param string $value
     */
    function dd($value = '')
    {
        die($value);

    }



   public function Save()
    {

        $name='';
        $tmpLocation = '';
        if(!empty($this->files)){
            $name = $this->imgNameChange($this->files[$this->fileHolder]['name']);
            $tmpLocation = $this->files[$this->fileHolder]['tmp_name'];
            $this->data += [$this->fileHolder => $name];
        }

        /**
         * clears the button's key-value pair from an array $data
         * because we don't need button's information in INSERT Query.
         */
        unset($this->data[$this->button]);
        unset($this->data[$this->id]);

        /**
         * CleanseCol returns the actual column name/s as a single string
         * from an array $data
         * example :
         * $data = {['title'] => ['Hello world'], ['description'] => ['Newbie Here']};
         * then the returned results are
         * $foo = title,description;
         * so that it can be added as a corresponding column name/s in INSERT query
         */
        $ColName = $this->CleanseCol($this->data);
        /**
         * CleanseValue returns the actual column value/s as a single string
         * from an array $data
         * example :
         * $data = {['title'] => ['Hello world'], ['description'] => ['Newbie Here']};
         * then the returned results are
         * $foo = 'Hello world','Newbie Here';
         * so that it can be added as  a corresponding column value/s in INSERT query
         * and also note single quote and comma separator that has been automatically
         * generated by this method
         */
        $ColValue = $this->CleanseValue($this->data);

        /**
         * $query holds actual INSERT query
         * example:
         * $data = {['title'] => ['Hello world'], ['description'] => ['Newbie Here']};
         * then
         * CleanseCol returns
         * $foo = title,description;
         * CleanseValue returns
         * $bar = 'Hello World', 'Newbie Here'
         * so $query = "INSERT INTO table_name (title,description) VALUES ('Hello World', 'NewBie Here');
         */
        $query = "INSERT INTO " . $this->tableName . " (" . $ColName . ") VALUES (" . $ColValue . ");";


        if(mysqli_query($this->conn,$query)) {

            if (!empty($name)) {
                $this->makeDir();
                move_uploaded_file($tmpLocation, $this->imgPath . $name);
            }
            return true;
        }
        else {

            echo mysqli_error($this->conn);
        }


    }


    public function fetchAll()
    {
        $query = "SELECT * FROM " . $this->tableName;
        $result = mysqli_query($this->conn, $query);
        return $result;

    }



    public function update()
    {
        unset($this->data[$this->button]);
        $id = $this->data['id'];
        unset($this->data['id']);
        $ColName = array_keys($this->data);
        $ColValues = array_values($this->data);
        $Query = $this->CleansedQueryForUpdate($ColName, $ColValues, $this->TableName, $id);
        return (mysqli_query($this->conn, $Query)) ? true : mysqli_error($this->conn);

    }



    public function CleansedQueryForUpdate($ColName, $ColValues, $id)
    {

        $_Query = '';
        $Query = "UPDATE " . $this->tableName . " SET ";
        for ($i = 0; $i < sizeof($ColName); $i++) {

            $_Query .= $ColName[$i] . " = '" . $ColValues[$i] . "', ";

        }

        $Cleansed_Query = substr($_Query, 0, strlen($_Query) - 2);
        $Query = $Query . $Cleansed_Query . " WHERE id = " . $id;
        return $Query;
    }


    /**
     * @return string
     */
    public function fetchSingle()
    {

        $query = "SELECT * FROM " . $this->tableName . " WHERE id = " . $this->id;
        return $result = mysqli_query($this->conn, $query);
    }


    /**
     * @return string
     */
   public function CleanseCol()
    {
        $RawData = array_keys($this->data);
        $ActualData = implode(',', $RawData);
        return $ActualData;
    }

    /**
     * @return bool|string
     */
   public function CleanseValue()
    {

        $RawData = '';
        foreach ($this->data as $key => $value) {

            $RawData .= "'" . $value . "',";
        }

        $ActualData = substr($RawData, 0, strlen($RawData) - 1);
        return $ActualData;

    }



    public function deleteRow(){
       $query = "DELETE FROM " .$this->tableName. "WHERE id = ".$this->id;
       return (mysqli_query($query,$this->conn)) ? true : mysqli_error($this->conn);

   }

    /**
     * @return string
     */
    public function imgNameChange(){

            $fileOldName =$this->files[$this->fileHolder]['name'];
            $Temp = explode('.',$fileOldName);
            $RandName = round(microtime(true))."_".round(microtime(true)).rand(00000,99999);
            $newName = $Temp[0].$RandName. "." .end($Temp);
            return $newName;



   }

    /**
     * @param $imageName
     * @return bool
     */
    public function DeleteImg($imageName){
       return (file_exists($this->imgPath.$imageName)) ? unlink($this->imgPath.$imageName) : false;
   }

   public function makeDir(){
        if(!file_exists($this->imgPath)){
            mkdir($this->imgPath,0777);
        }

   }


}




